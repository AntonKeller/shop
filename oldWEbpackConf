const path = require('path');
const Html_webpack_plugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

let mode = 'development'

if (process.env.NODE_ENV === 'production') {
    mode = 'production'
}

const cssRegex = /\.css$/
const cssModuleRegex = /\.module\.css$/
const sassRegex = /\.(scss|sass)$/
const sassModuleRegex = /\.module\.(scss|sass)$/
const postcssConfigPath = "postcss.config.js"

console.log(mode + ' mode')

module.exports = {
    mode: mode,
    plugins: [
        // new MiniCssExtractPlugin({
        //     filename: '[name].[contenthash].css'
        // }),
        new Html_webpack_plugin({
            template: './src/index.html'
        })],
    entry: './src/index.js',
    output: {
        filename: './main.js',
        assetModuleFilename: 'assets/[hash][ext][query]',
        clean: true,
    },
    devServer: {
        static: {
            directory: path.join(__dirname, 'dist'),
        },
        compress: true,
        port: 9000
    },
    module: {
        rules: [
            {
                test: /\.html$/i,
                loader: 'html-loader'
            },

            // {
            //     test: cssModuleRegex,
            //     use: [
            //         'style-loader',
            //         'css-loader'
            //     ]
            // },

            {
                test: /\.(sa|sc|c)ss$/,
                use: [
                    (mode === 'development') ? 'style-loader' : MiniCssExtractPlugin.loader,
                    {
                        loader: "css-loader",
                        options: {
                            importLoaders: 1,
                            // modules: true,
                            // localIdentName: "[name]__[local]___[hash:base64:5]"
                        }
                    },
                    {
                        loader: 'postcss-loader',
                        options: {
                            postcssOptions: {
                                plugins: 'postcss-preset-env'
                            }
                        }
                    },
                    'sass-loader',
                ],
            },
            {
                test: /\.js$/,
                exclude: /(node_modules|bower_components)/,
                use: {
                    loader: "babel-loader",
                },
            },
            {
                test: /\.(png|svg|jpg|jpeg|gif)$/i,
                type: 'asset/resource'// use: ["file-loader"]
            }
        ]
    }
}